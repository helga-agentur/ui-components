!function(){"use strict";var e=({element:e,name:t,validate:s=(()=>!0),isSet:n=!1,errorMessage:i="HTML attribute not valid"}={})=>{if(!t)throw new Error(`getAndValidateAttribute: Pass an argument { name }; you passed ${t} instead.`);if(!(e&&e instanceof HTMLElement))throw new Error(`getAndValidateAttribute: Pass an argument { element } that is a HTMLElement; you passed ${e} instead.`);if(n){const n=e.hasAttribute(t);if(!0!==s(n))throw new Error(`getAndValidateAttribute: Attribute ${t} did not pass validation, is ${n}: ${i}.`);return n}const a=e.getAttribute(t);if(!0!==s(a))throw new Error(`getAndValidateAttribute: Attribute ${t} did not pass validation, is ${a}: ${i}.`);return a},t=({eventName:e="announce-element",eventType:t,eventIdentifier:s}={})=>{let n;const i=new Promise((e=>{n=e}));return{model:void 0,announce(){const n=new CustomEvent(e,{bubbles:!0,detail:{element:this,eventType:t,eventIdentifier:s}});return setTimeout((()=>{this.dispatchEvent(n)})),i},setModel(e){this.model=e,n()}}};class s extends HTMLElement{constructor(){super(),this.readAttributes(),Object.assign(this,t({eventType:"overlay-button",eventIdentifier:this.name})),this.setupClickListener()}async connectedCallback(){await this.announce(),this.handleModelChanges(),this.updateDOM()}readAttributes(){this.name=this.getName(),this.type=this.getType();const[e,t]=this.getClassNames();this.openClass=e,this.closedClass=t}getClassNames(){return[e({element:this,name:"data-open-class-name"}),e({element:this,name:"data-closed-class-name"})]}getName(){return e({element:this,name:"data-overlay-name",validate:e=>e&&"string"==typeof e})}getType(){return e({element:this,name:"data-type",validate:e=>!e||["toggle","open","close"].includes(e)})||"toggle"}setupClickListener(){var e,t,s;e=this,t="click",s=this.handleClick.bind(this),e.addEventListener(t,s)}handleClick(){this.model[this.type]()}handleModelChanges(){this.model.on("change",this.updateDOM.bind(this))}updateDOM(){requestAnimationFrame((()=>{this.model.isOpen?(this.classList.remove(this.closedClass),this.classList.add(this.openClass)):(this.classList.remove(this.openClass),this.classList.add(this.closedClass))}))}}window.customElements.get("overlay-button-component")||window.customElements.define("overlay-button-component",s)}();
