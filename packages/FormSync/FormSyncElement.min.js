!function(){"use strict";var t=t=>{if(!t.every((t=>t.name)))throw new Error(`canReadAttribute: Every config entry must be an object with property name; you passed ${JSON.stringify(t)} instead.`);return{readAttributes(){t.forEach((t=>{const{name:e,validate:n,property:i,transform:r}=t,o=this.getAttribute(e);if("function"==typeof n&&!n(o))throw new Error(`canWatchAttribute: Attribute ${e} does not match validation rules`);const a=r||(t=>t);this[i||e]=a(o)}))}}},e=(t,e)=>{let n;return()=>{n&&clearTimeout(n),n=setTimeout(t,e)}};class n{setup({originalElement:t,clonedElement:e,originalProperty:n="checked",clonedProperty:i=n,autoSubmit:r=[],submitOnEnter:o=!1}={}){if(!(t instanceof HTMLElement))throw new Error(`InputSync: Expected originalElement to be instance of HTMLElement, is ${t} instead.`);if(!(e instanceof HTMLElement))throw new Error(`InputSync: Expected clonedElement to be instance of HTMLElement, is ${e} instead.`);if(!Array.isArray(r)||!r.every((t=>"object"==typeof t)))throw new Error(`InputSync: Expected autoSubmit to be an array of event names (strings), is ${r} instead.`);this.originalElement=t,this.clonedElement=e,this.autoSubmit=r,this.submitOnEnter=o,this.originalProperty=n,this.clonedProperty=i,this.setupOriginalWatcher(),this.setupClonedWatcher(),this.syncOriginalToCloned(),this.setupAutoSubmitWatcher(),this.setupEnterWatcher()}getOriginalForm(){return this.originalElement.closest("form")}submitOriginalForm(){this.clonedElement.checkValidity()&&(t=>{if(!(t instanceof HTMLFormElement))throw new Error(`submitForm: Pass a valid HTMLFormElement as parameter to the function; you used ${t} instead.`);const e="input[type='submit'], button[type='submit']",n=t.querySelector(e);if(!n)throw new Error(`submitForm: Original submit button with selector ${e} could not be found in form ${t}. Form cannot be submitted.`);n.click()})(this.getOriginalForm())}setupOriginalWatcher(){"OPTION"===this.originalElement.tagName?this.originalElement.parentElement.addEventListener("change",this.syncOriginalToCloned.bind(this)):this.originalElement.addEventListener("change",this.syncOriginalToCloned.bind(this))}setupClonedWatcher(){this.clonedElement.addEventListener("input",this.syncClonedElementToOriginal.bind(this)),this.clonedElement.addEventListener("change",this.syncClonedElementToOriginal.bind(this))}setupEnterWatcher(){this.submitOnEnter&&this.clonedElement.addEventListener("keyup",(t=>{"Enter"===t.key&&this.submitOriginalForm()}))}syncOriginalToCloned(){this.clonedElement[this.clonedProperty]=this.originalElement[this.originalProperty]}syncClonedElementToOriginal(){this.originalElement[this.originalProperty]=this.clonedElement[this.clonedProperty]}setupAutoSubmitWatcher(){for(const{eventName:t,debounceTime:n}of this.autoSubmit){let i=this.submitOriginalForm.bind(this);n&&(i=e(this.submitOriginalForm.bind(this),n)),this.clonedElement.addEventListener(t,i)}}}var i=({sourceElement:t,targetElement:e,attribute:n,overwrite:i=!0}={})=>{if(!(t instanceof HTMLElement))throw new Error(`copyAttribute: sourceElement must be a HTMLElement, is ${t} instead.`);if(!(e instanceof HTMLElement))throw new Error(`copyAttribute: sourceElement must be a HTMLElement, is ${e} instead.`);if("string"!=typeof n)throw new Error(`copyAttribute: attribute must be a string, is ${n} instead.`);!i&&e.hasAttribute(n)||t.hasAttribute(n)&&e.setAttribute(n,t.getAttribute(n))};class r extends HTMLElement{inputs=[];constructor(){super(),Object.assign(this,t([{name:"data-form-elements-selector",property:"formElementsSelector",validate:t=>!!t},{name:"data-auto-submit",property:"autoSubmit",transform:t=>t?t.split(/\s*,\s*/).filter((t=>!!t)).map((t=>t.split(/\s*:\s*/))).map((([t,e])=>({eventName:t,...e?{debounceTime:parseFloat(e)}:{}}))):[]},{name:"data-submit-on-enter",property:"submitOnEnter",transform:t=>null!=t}])),this.readAttributes()}connectedCallback(){this.getInputs(),this.renderInputs(),this.setupInputSync()}getInputs(){const t=document.querySelectorAll(this.formElementsSelector),e=Array.from(t).map((t=>({input:t,label:document.querySelector(`[for="${t.getAttribute("id")||t.getAttribute("name")}"]`)})));this.inputs=e}getInputProperty(t){if("TEXTAREA"===t.tagName)return"value";if("SELECT"===t.tagName)return"value";if("OPTION"===t.tagName)return"selected";if("INPUT"===t.tagName){const e=t.getAttribute("type");return["radio","checkbox"].includes(e)?"checked":"value"}return console.warn("FormSync: Cannot synchronize value of form element %o, is unknown.",t),"value"}renderInputs(){const t=this.querySelector("template"),e=document.createDocumentFragment();this.inputs.forEach((n=>{const i=t.content?t.content.firstElementChild.cloneNode(!0):t.cloneNode(!0).firstElementChild,r=i.querySelector("[data-input]"),o=i.querySelector("[data-label]");this.copyLabel(n.label,o),this.copySelectOptions(n.input,r),this.copySelectOptionLabel(n.input,o),this.syncInput(n.input,r),this.copyPlaceholder(n.input,r),this.copyDisabled(n.input,r),this.connectLabelToInput(o,r),e.appendChild(i)})),requestAnimationFrame((()=>{t.parentNode.appendChild(e)}))}connectLabelToInput(t,e){if(!t||!e)return;if(t.hasAttribute("for"))return;const n=e.getAttribute("id")||`input-id-${Math.random().toString().replace(".","")}`;e.setAttribute("id",n),t.setAttribute("for",n)}copyLabel(t,e){t&&!e?console.warn("FormSync: Label in clone missing for %o; use attribute data-label to mark the label element.",t.outerHTML):t&&e&&(e.textContent=t.textContent)}copyPlaceholder(t,e){t&&e&&i({sourceElement:t,targetElement:e,attribute:"placeholder",overwrite:!1})}copyDisabled(t,e){t&&e&&i({sourceElement:t,targetElement:e,attribute:"disabled",overwrite:!1})}copySelectOptions(t,e){if("SELECT"===t.tagName){if(!e||"SELECT"!==e.tagName)throw new Error(`FormSync: If original element is a select, you must provide a template that contains a select with a data-input attribute; you privded ${e.outerHTML} instead.`);e.innerHTML=t.innerHTML}}copySelectOptionLabel(t,e){if("OPTION"===t.tagName){if(!e)throw new Error(`FormSync: If you want to sync select options, you must provide a template that contains an element with data-label to sync the label; you provided ${e.outerHTML} instead.`);e.innerText=t.innerText}}setupInputSync(){this.addEventListener("change",(t=>{t.target.matches('input[type="radio"]')&&this.syncSimilarRadioInputs(t.target)}))}syncSimilarRadioInputs(t){const e=t.getAttribute("name"),n=this.querySelectorAll(`input[type="radio"][name="${e}"]`);Array.from(n).forEach((e=>{e.inputSync?e.inputSync.syncClonedElementToOriginal():console.warn("FormSync: Could not find InputSync instance on radio input %o",t)}))}syncInput(t,e){if(!e)return void console.warn("FormSync: Input in clone missing for %o; use attribute data-input to mark the input element.",t.outerHTML);const i=new n,r=this.checkSelectOptionCloneCompatibility(t,e),o=this.getInputProperty(t);i.setup({originalElement:t,clonedElement:e,autoSubmit:this.autoSubmit,originalProperty:o,clonedProperty:r?this.getInputProperty(e):o,submitOnEnter:this.submitOnEnter}),e.inputSync=i}checkSelectOptionCloneCompatibility(t,e){if("OPTION"===t.tagName&&t.tagName!==e.tagName&&("checkbox"!==e.type||!1===t.parentElement.multiple))throw new Error("FormSync: Can't sync select element without attribute multiple to checkbox!");return!0}}window.customElements.get("form-sync")||window.customElements.define("form-sync",r)}();
