!function(){"use strict";var e=({eventName:e="announce-element",eventType:t,eventIdentifier:n}={})=>{let i;const s=new Promise((e=>{i=e}));return{model:void 0,announce(){const i=new CustomEvent(e,{bubbles:!0,detail:{element:this,eventType:t,eventIdentifier:n}});return setTimeout((()=>{this.dispatchEvent(i)})),s},setModel(e){this.model=e,i()}}},t=(e,t,n)=>(e.addEventListener(t,n),()=>e.removeEventListener(t,n));class n extends HTMLElement{isSeeking=!1;constructor(){super(),Object.assign(this,e()),this.getInput(),this.setupInputListeners()}async connectedCallback(){await this.announce(),this.setupModelListeners()}getInput(){const e='input[type="range"]',t=this.querySelector(e);if(!t)throw new Error(`TimelineComponent: Must contain a child that matches ${e} on initialization.`);this.input=t}setupInputListeners(){t(this.input,"change",this.updateTime.bind(this)),t(this.input,"mousedown",(()=>{this.isSeeking=!0})),t(window,"mouseup",(()=>{this.isSeeking=!1}))}updateTime(){if(!this.model.loadingState)return;const e=this.input.value;this.model.setCurrentTime(e)}setupModelListeners(){this.model.on("canplaythrough",(()=>{this.input.max=this.model.getDuration()})),this.model.on("timeupdate",this.updateValue.bind(this))}updateValue(){if(this.isSeeking)return;const e=this.model.getCurrentTime();this.input.value=e}}window.customElements.get("media-timeline-component")||window.customElements.define("media-timeline-component",n)}();
