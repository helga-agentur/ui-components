!function(){"use strict";var e=({eventName:e="announce-element",eventType:t,eventIdentifier:n}={})=>{let i;const s=new Promise((e=>{i=e}));return{model:void 0,announce(){const i=new CustomEvent(e,{bubbles:!0,detail:{element:this,eventType:t,eventIdentifier:n}});return setTimeout((()=>{this.dispatchEvent(i)})),s},setModel(e){this.model=e,i()}}};class t extends HTMLElement{constructor(){super(),Object.assign(this,e()),this.getInput(),this.setupInputListeners()}async connectedCallback(){await this.announce(),this.setupModelListeners()}getInput(){const e='input[type="range"]',t=this.querySelector(e);if(!t)throw new Error(`VolumeComponent: Must contain a child that matches ${e} on initialization.`);this.input=t}setupInputListeners(){var e,t,n;e=this.input,t="input",n=this.updateVolume.bind(this),e.addEventListener(t,n)}updateVolume(){this.model.loadingState&&this.model.setVolume(this.input.value/100)}setupModelListeners(){this.model.on("canplaythrough",(()=>{this.updateValue(100*this.model.getVolume())})),this.model.on("volumechange",(e=>{this.updateValue(100*e)}))}updateValue(e){this.input.value=e}}window.customElements.get("media-volume-component")||window.customElements.define("media-volume-component",t)}();
