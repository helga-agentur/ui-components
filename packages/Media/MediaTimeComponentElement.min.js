!function(){"use strict";var t=({eventName:t="announce-element",eventType:e,eventIdentifier:n}={})=>{let i;const s=new Promise((t=>{i=t}));return{model:void 0,announce(){const i=new CustomEvent(t,{bubbles:!0,detail:{element:this,eventType:e,eventIdentifier:n}});return setTimeout((()=>{this.dispatchEvent(i)})),s},setModel(t){this.model=t,i()}}};class e extends HTMLElement{constructor(){super(),Object.assign(this,t()),this.getType()}getType(){this.type=(({element:t,name:e,validate:n=(()=>!0),isSet:i=!1,errorMessage:s="HTML attribute not valid"}={})=>{if(!e)throw new Error(`getAndValidateAttribute: Pass an argument { name }; you passed ${e} instead.`);if(!(t&&t instanceof HTMLElement))throw new Error(`getAndValidateAttribute: Pass an argument { element } that is a HTMLElement; you passed ${t} instead.`);if(i){const i=t.hasAttribute(e);if(!0!==n(i))throw new Error(`getAndValidateAttribute: Attribute ${e} did not pass validation, is ${i}: ${s}.`);return i}const a=t.getAttribute(e);if(!0!==n(a))throw new Error(`getAndValidateAttribute: Attribute ${e} did not pass validation, is ${a}: ${s}.`);return a})({element:this,name:"data-type"})||"current"}async connectedCallback(){await this.announce(),this.setupModelListeners()}setupModelListeners(){"current"===this.type?this.model.on("timeupdate",(()=>this.updateDOM(this.model.getCurrentTime()))):this.model.on("canplaythrough",(()=>this.updateDOM(this.model.getDuration())))}updateDOM(t){requestAnimationFrame((()=>{this.textContent=this.formatTime(t)}))}formatTime(t){const e=Math.floor(t);return`${Math.floor(e/60)}:${n=e%60,n<10?`0${n}`:n}`;var n}}window.customElements.get("media-time-component")||window.customElements.define("media-time-component",e)}();
