!function(){"use strict";var t=t=>{if(!t.every((t=>t.name)))throw new Error(`canReadAttribute: Every config entry must be an object with property name; you passed ${JSON.stringify(t)} instead.`);return{readAttributes(){t.forEach((t=>{const{name:e,validate:i,property:a,transform:r}=t,s=this.getAttribute(e);if("function"==typeof i&&!i(s))throw new Error(`canWatchAttribute: Attribute ${e} does not match validation rules`);const n=r||(t=>t);this[a||e]=n(s)}))}}};class e extends HTMLElement{baseURL="https://vimeo.com/";urlInfoPath="api/oembed.json";constructor(){if(super(),!this.getImage())throw new Error(`VimeoPreviewImage: Use an img as child of vimeo-preview-image; content is ${this.innerHTML} instead.`);Object.assign(this,t([{name:"data-video-id",validate:t=>!!t,property:"videoID"},{name:"data-video-width",transform:t=>parseInt(t,10),validate:t=>!t||!Number.isNaN(parseInt(t,10)),property:"width"}])),this.readAttributes()}async connectedCallback(){await this.updateImageSource()}async getThumbnailURL(){const t=await fetch(this.getVideoInfoURL());if(t.status<200||t.status>=300)throw new Error(`VimeoPreviewImage: Status returned by Vimeo API is ${t.status}, should be 200`);return(await t.json()).thumbnail_url}getVideoInfoURL(){const t={url:`${this.baseURL}${this.videoID}`,...this.width?{width:this.width}:{}},e=Object.entries(t).map((([t,e])=>`${t}=${e}`)).join("&");return`${this.baseURL}${this.urlInfoPath}?${e}`}async updateImageSource(){const t=await this.getThumbnailURL();this.getImage().setAttribute("src",t)}getImage(){return this.querySelector("img")}}window.customElements.get("vimeo-preview-image")||window.customElements.define("vimeo-preview-image",e)}();
