!function(){"use strict";var t=t=>{if(!t.every((t=>t.name)))throw new Error(`canReadAttribute: Every config entry must be an object with property name; you passed ${JSON.stringify(t)} instead.`);return{readAttributes(){t.forEach((t=>{const{name:e,validate:i,property:s,transform:n}=t,o=this.getAttribute(e);if("function"==typeof i&&!i(o))throw new Error(`canWatchAttribute: Attribute ${e} does not match validation rules`);const r=n||(t=>t);this[s||e]=r(o)}))}}};class e extends HTMLElement{constructor(){super(),Object.assign(this,t([{name:"data-previous-button-selector",property:"previousButtonSelector"},{name:"data-next-button-selector",property:"nextButtonSelector"},{name:"data-active-content-selector",property:"activeContentSelector"},{name:"data-disabled-button-class-name",property:"disabledButtonClassName"}])),this.readAttributes()}connectedCallback(){this.cacheButtons(),this.setupScrollListener(),this.calculateButtonVisibility(),this.updateDOM(),this.setupClickListener(),this.showActive(),this.setupMutationListeners(),this.setupResizeListeners()}cacheButtons(){(this.previousButtonSelector||this.nextButtonSelector)&&(this.previousButton=document.querySelector(this.previousButtonSelector),this.nextButton=document.querySelector(this.nextButtonSelector),this.previousButton&&this.nextButton||console.warn("Previous or next button not found in DOM; previous is %o (selector %s) next is %o (selector %s)",this.previousButton,this.previousButtonSelector,this.nextButton,this.nextButtonSelector))}getElementWidth(){return this.clientWidth}getContentWidth(){return this.scrollWidth}setupScrollListener(){var t,e,i;t=this,e="scroll",i=this.debounceScroll.bind(this),t.addEventListener(e,i)}debounceScroll(){this.debounceScrollTimeout&&clearTimeout(this.debounceScrollTimeout),this.debounceScrollTimeout=setTimeout(this.handleScroll.bind(this),50)}handleScroll(){this.calculateButtonVisibility(),this.updateDOM()}calculateButtonVisibility(){const t=this.getContentWidth()>this.getElementWidth(),e=0===this.scrollLeft,i=this.scrollLeft===this.getContentWidth()-this.getElementWidth();this.isPreviousButtonVisible=t&&!e,this.isNextButtonVisible=t&&!i}setupClickListener(){this.previousButton&&this.previousButton.addEventListener("click",this.handleButtonClick.bind(this)),this.nextButton&&this.nextButton.addEventListener("click",this.handleButtonClick.bind(this))}handleButtonClick(t){const e=t.currentTarget===this.nextButton?1:-1,i=this.getElementWidth()*e;this.scrollBy({left:i,behavior:"smooth"})}setupMutationListeners(){new MutationObserver(((t,e)=>{this.calculateButtonVisibility(),this.updateDOM()})).observe(this,{childList:!0,subtree:!0})}setupResizeListeners(){window.addEventListener("resize",(()=>{this.calculateButtonVisibility(),this.updateDOM()}))}showActive(){if(!this.activeContentSelector)return;const t=this.querySelector(this.activeContentSelector);t?t.scrollIntoView({inline:"center"}):console.warn("Slider: Active content with selector %s not found in %o",this.activeContentSelector,this)}updateDOM(){requestAnimationFrame((()=>{const t=this.isPreviousButtonVisible?"remove":"add",e=this.isNextButtonVisible?"remove":"add";this.disabledButtonClassName||!this.previousButton&&!this.nextButton||console.warn("Slider: Tried to update visible class name on buttons, but disabled button class name is not set"),this.previousButton&&this.previousButton.classList[t](this.disabledButtonClassName),this.nextButton&&this.nextButton.classList[e](this.disabledButtonClassName)}))}}window.customElements.get("slider-component")||window.customElements.define("slider-component",e)}();
