!function(){"use strict";var e=e=>{if(!e.every((e=>e.name)))throw new Error(`canReadAttribute: Every config entry must be an object with property name; you passed ${JSON.stringify(e)} instead.`);return{readAttributes(){e.forEach((e=>{const{name:t,validate:a,property:r,transform:i}=e,s=this.getAttribute(t);if("function"==typeof a&&!a(s))throw new Error(`canWatchAttribute: Attribute ${t} does not match validation rules`);const n=i||(e=>e);this[r||t]=n(s)}))}}};class t extends HTMLElement{imageSuffixes=["maxresdefault","hqdefault","mqdefault","sddefault","default"];constructor(){if(super(),!this.getImage())throw new Error(`YouTubePreviewImage: Use an img as child of youtube-preview-image; content is ${this.innerHTML} instead.`);Object.assign(this,e([{name:"data-video-id",validate:e=>!!e,property:"videoID"}])),this.readAttributes()}async connectedCallback(){await this.updateImageSource()}async getBestValidImage(){for(const e of this.imageSuffixes){const t=this.generateImageURL(this.videoID,e);if(await this.testImage(t))return t}return null}getImage(){return this.querySelector("img")}async updateImageSource(){const e=await this.getBestValidImage();e&&this.getImage().setAttribute("src",e)}generateImageURL(e,t){return`https://img.youtube.com/vi/${e}/${t}.jpg`}async testImage(e){const t=new Image;return new Promise((a=>{t.addEventListener("load",(()=>{120===t.naturalWidth?a(!1):a(!0)})),t.addEventListener("error",(()=>a(!1))),t.setAttribute("src",e)}))}}window.customElements.get("youtube-preview-image")||window.customElements.define("youtube-preview-image",t)}();
