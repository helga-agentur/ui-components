!function(){"use strict";var e=(e,t,{transform:i=(e=>e),validate:a=(()=>!0),expectation:n="(expectation not provided)"}={})=>{const o=e.getAttribute(t),r=i(o);if(!a(r))throw new Error(`Expected attribute ${t} of element ${e.outerHTML} to be ${n}; got ${r} instead (${o} before the transform function was applied).`);return r};class t extends HTMLElement{connectedCallback(){this.#e()}#e(){const t=e(this,"data-time",{transform:e=>null!==e&&new Date(e),validate:e=>e&&!Number.isNaN(e.getTime()),expectation:"a valid date"}),i=e(this,"data-locale"),a=this.#t(t.getTime(),i);this.#i(a)}#t(e,t){const{unit:i,value:a}=(e=>{const t=36e5,i=24*t,a={minute:[6e4,45],hour:[t,36],day:[i,10],week:[7*i,6],month:[30*i,10]},n=Math.abs(e),o=[...Object.entries(a)].find((e=>n<e[1][0]*e[1][1]))||["year",[355*i]];return{value:Math.round(n/o[1][0])*Math.sign(e),unit:o[0]}})(e-Date.now()),n=[...t?[t]:[],{style:"short",numeric:"auto"}];return new Intl.RelativeTimeFormat(...n).format(a,i)}#i(e){this.textContent=e}}window.customElements.get("relative-time")||window.customElements.define("relative-time",t)}();
